{"version":3,"sources":["components/Todo/list.js","components/Todo/todo.js","components/Redux/reduxAdvanced.js","views/Landing/LandingPage.js","App.js","serviceWorker.js","index.js"],"names":["List","props","data","Object","values","map","val","ToDoApp","useState","value","setValue","localStorage","getItem","JSON","parse","list","setList","useEffect","setItem","console","log","stringify","TextField","label","onChange","e","target","Button","onClick","idx","keys","length","reduxAdv","LandingPage","AppBar","position","Toolbar","to","style","marginLeft","path","component","ToDoComponent","ReduxAdvanced","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4RAEe,SAASA,EAAKC,GAAQ,IAC9BC,EAAQD,EAARC,KAEP,OACI,4BACKC,OAAOC,OAAOF,GAAMG,KAAI,SAAAC,GACrB,OAAO,4BAAKA,OCLT,SAASC,EAAQN,GAAO,MAEbO,mBAAS,IAFI,mBAE/BC,EAF+B,KAEzBC,EAFyB,OAGhBF,mBAASG,aAAaC,QAAQ,QAAUC,KAAKC,MAAMH,aAAaC,QAAQ,SAAW,IAHnE,mBAGhCG,EAHgC,KAG3BC,EAH2B,KAgBnC,OAXHC,qBAAU,WAC0B,OAAjCN,aAAaC,QAAQ,QAAmBD,aAAaO,QAAQ,OAAOH,GAAQJ,aAAaO,QAAQ,OAAO,MACzG,IAEFD,qBAAU,WACNE,QAAQC,IAAI,oBAAoBL,GACjCJ,aAAaO,QAAQ,OAAOL,KAAKQ,UAAUN,MAC5C,CAACA,IAEHI,QAAQC,IAAIT,aAAaC,QAAQ,QAAQG,GAGlC,yCAEI,kBAACO,EAAA,EAAD,CAAWb,MAAOA,EAAOc,MAAM,aAAaC,SAAU,SAACC,GAAD,OAAOf,EAASe,EAAEC,OAAOjB,UAC/E,kBAACkB,EAAA,EAAD,CAAQC,QAAS,WACb,IAAMC,EAAM1B,OAAO2B,KAAKf,GAAMgB,OAC9Bf,EAAQ,2BAAID,GAAL,kBAAWc,EAAKpB,OAF3B,OAII,kBAACkB,EAAA,EAAD,CAAQC,QAAS,WACfjB,aAAaO,QAAQ,OAAOL,KAAKQ,UAAU,KAC7CL,EAAQ,MAFR,eAIJ,kBAAC,EAAD,CAAUd,KAAMa,KC7Bb,SAASiB,EAAS/B,GAC7B,OACI,+CCEO,SAASgC,EAAYhC,GAClC,OACE,kBAAC,WAAD,KACE,kBAACiC,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,6BACE,kBAAC,IAAD,CAAMC,GAAG,SAAT,cAEF,yBAAKC,MAAO,CAACC,WAAW,KACtB,kBAAC,IAAD,CAAMF,GAAG,UAAT,yBAIN,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOG,KAAK,QAAQC,UAAWC,IAC/B,kBAAC,IAAD,CAAOF,KAAK,SAASC,UAAWE,MCPzBC,MAVf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,KACD,kBAACZ,EAAD,SCIea,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5C,QAAQ4C,MAAMA,EAAMC,c","file":"static/js/main.57b30031.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nexport default function List(props) {\r\nconst {data} = props;\r\n\r\nreturn (\r\n    <ul>\r\n        {Object.values(data).map(val => {\r\n            return <li>{val}</li>\r\n        })}\r\n    </ul>\r\n)\r\n}\r\n","import React, { useState,useEffect } from 'react';\r\nimport {TextField,Button} from \"@material-ui/core\";\r\nimport TodoList from  \"./list\";\r\nexport default function ToDoApp(props) {\r\n//localStorage.removeItem(\"todo\");\r\n const [value,setValue] = useState(\"\");\r\nconst [list,setList] = useState(localStorage.getItem(\"todo\") ? JSON.parse(localStorage.getItem(\"todo\")) : {});\r\n\r\n useEffect(() => {\r\n    localStorage.getItem(\"todo\") !== null ? localStorage.setItem(\"todo\",list) : localStorage.setItem(\"todo\",[])\r\n },[]);\r\n\r\n useEffect(() => {\r\n     console.log(\"running useEffect\",list);\r\n    localStorage.setItem(\"todo\",JSON.stringify(list));\r\n },[list])\r\n\r\n console.log(localStorage.getItem(\"todo\"),list);\r\n\r\n    return (\r\n        <div>\r\n            To do App \r\n            <TextField value={value} label=\"Enter Item\" onChange={(e) => setValue(e.target.value)} />\r\n            <Button onClick={() => {\r\n                const idx = Object.keys(list).length;\r\n                setList({...list,[idx]:value});\r\n            }}>Add</Button>\r\n                <Button onClick={() => {\r\n                  localStorage.setItem(\"todo\",JSON.stringify({}));\r\n                setList({});\r\n            }}>Clear List!</Button>\r\n            <TodoList data={list}/>\r\n        </div>\r\n    )\r\n}","import React, { Component } from 'react';\r\n\r\nexport default function reduxAdv(props) {\r\n    return (\r\n        <div>\r\n            Redux Advanced\r\n        </div>\r\n    )\r\n}","import React, { useState, useEffect, Fragment } from \"react\";\r\nimport { TextField, Button, AppBar, Toolbar } from \"@material-ui/core\";\r\nimport { Route, Switch, Link } from \"react-router-dom\";\r\nimport ToDoComponent from \"../../components/Todo/todo\";\r\nimport ReduxAdvanced from \"../../components/Redux/reduxAdvanced\";\r\n\r\nexport default function LandingPage(props) {\r\n  return (\r\n    <Fragment>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <div>\r\n            <Link to=\"/todo\">To do App</Link>\r\n          </div>\r\n          <div style={{marginLeft:24}}>\r\n            <Link to=\"/redux\">Redux Advanced App</Link>\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Switch>\r\n        <Route path=\"/todo\" component={ToDoComponent} />\r\n        <Route path=\"/redux\" component={ReduxAdvanced} />\r\n      </Switch>\r\n    </Fragment>\r\n  );\r\n}\r\n","import React from 'react';\nimport {BrowserRouter as Router} from \"react-router-dom\";\n\nimport LandingPage from \"./views/Landing/LandingPage\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n     <LandingPage/>\n     </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}